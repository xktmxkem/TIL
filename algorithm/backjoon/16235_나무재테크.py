# 첫째 줄에 N, M, K가 주어진다.## 둘째 줄부터 N개의 줄에 A배열의 값이 주어진다. r번째 줄의 c번째 값은 A[r][c]이다.## 다음 M개의 줄에는 상도가 심은 나무의 정보를 나타내는 세 정수 x, y, z가 주어진다. 처음 두 개의 정수는 나무의 위치 (x, y)를 의미하고, 마지막 정수는 그 나무의 나이를 의미한다.# 첫째 줄에 K년이 지난 후 살아남은 나무의 수를 출력한다.# 처음에 양분은 모든 칸에 5만큼 들어있다.# 봄 : 봄에는 나무가 자신의 나이만큼 양분을 먹고, 나이가 1 증가한다. 각각의 나무는 나무가 있는 1×1 크기의 칸에 있는 양분만 먹을 수 있다.# 하나의 칸에 여러 개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다. 만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분을 먹지 못하고 즉시 죽는다.# 여름 :  봄에 죽은 나무가 양분으로 변하게 된다. 각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추가된다. 소수점 아래는 버린다.# 가을 : 가을에는 나무가 번식한다. 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다.# 겨울 : 겨울에는 S2D2가 땅을 돌아다니면서 땅에 양분을 추가한다. 각 칸에 추가되는 양분의 양은 A[r][c]이고, 입력으로 주어진다.from collections import dequeimport copydy = [-1, 1, 0, 0, -1, -1, 1, 1]dx = [0, 0, -1, 1, -1, 1, -1, 1]def spring_summer():    global N    die_tree = 0    for y in range(N):        for x in range(N):            if len(TREE[y][x]) > 0:                for i in range(len(TREE[y][x])):                    tree = TREE[y][x].popleft()                    if ENERGY[y][x] - tree >= 0:                        TREE[y][x].append(tree + 1)                        ENERGY[y][x] -= tree                    else:                        die_tree += tree // 2                # 죽은 나무 계산 후 양분 바로 추가                ENERGY[y][x] += die_tree                # 양분 초기화                die_tree = 0def fall():    global N    for y in range(N):        for x in range(N):            for idx in range(len(TREE[y][x])):                if TREE[y][x][idx] % 5 == 0:                    for i in range(8):                        ny = y + dy[i]                        nx = x + dx[i]                        if 0 <= ny < N and 0 <= nx < N:                            TREE[ny][nx].appendleft(1)def winter():    global N    for y in range(N):        for x in range(N):            ENERGY[y][x] += INITIAL_ENERGY[y][x]# N = 맵크기, M = 초기 나무 정보, K = 년도N, M, K = map(int, input().split())ENERGY = [[5 for i in range(N)] for j in range(N)]INITIAL_ENERGY = [list(map(int, input().split())) for _ in range(N)]TREE = [[deque() for i in range(N)] for j in range(N)]LIVE_TREE = 0for i in range(M):    y, x, age = map(int, input().split())    TREE[y - 1][x - 1].append(age)for j in range(K):    spring_summer()    fall()    winter()for y in range(N):    for x in range(N):        LIVE_TREE += len(TREE[y][x])print(LIVE_TREE)